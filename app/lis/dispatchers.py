import json

from aiogram import Dispatcher
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from app.telegram.buttons import (
    skip_keyboard,
    yes_no_kb,
    parse_action_kb,
    start_parse_kb,
)

from app.lis.states import (
    AuthStates,
    SearchForSkinStates,
    ParseStates,
)
from app.lis.constants import (
    SKIN_NAME_INPUT_PROMPT,
    JSON_SEARCH_PROMPT,
)
from app.lis.service import (
    get_user_balance,
    send_request_for_skins,
)
from app.lis.factory import (
    handle_start_parse,
    handle_stop_parse,
)
from app.lis.utils import send_first_skins

from app.lis import crud as lis_crud

dp = Dispatcher()


####################
##### lis_auth #####
####################


@dp.message(Command("lis_auth"))
async def handle_lis_auth(message: Message, state: FSMContext) -> None:
    user_id = message.from_user.id
    user_exists = await lis_crud.check_exist_user_or_not(tg_id=user_id)

    if user_exists:
        await message.answer("‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")

    else:
        await message.answer("üîë –û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à LIS —Ç–æ–∫–µ–Ω.")
        await state.set_state(AuthStates.waiting_for_token)


@dp.message(AuthStates.waiting_for_token)
async def process_token(message: Message, state: FSMContext) -> None:
    token = message.text
    user_id = message.from_user.id
    auth_model = await lis_crud.add_lis_auth(user_id=user_id, token=token)

    if auth_model:
        await message.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")

    else:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ö–æ–¥–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!")

    await state.clear()


#####################
#### lis_balance ####
#####################


@dp.message(Command("lis_balance"))
async def check_lis_balance(message: Message) -> None:
    user_id = message.from_user.id
    user_exists = await lis_crud.check_exist_user_or_not(tg_id=user_id)

    if not user_exists:
        await message.answer(
            "üîí –í—ã –µ—â—ë –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /lis_auth."
        )

    balance_data = await get_user_balance(lis_token=user_exists.lis_token)

    if "balance" in balance_data:
        await message.answer(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance_data['balance']}")

    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


######################
##### lis_search #####
######################


@dp.message(Command("lis_search"))
async def get_skins_available_for_purchase(message: Message, state: FSMContext) -> None:
    user_id = message.from_user.id
    user_exists = await lis_crud.check_exist_user_or_not(tg_id=user_id)

    if not user_exists:
        await message.answer(
            "üîí –í—ã –µ—â—ë –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /lis_auth."
        )

    await state.update_data(lis_token=user_exists.lis_token)

    await message.answer(
        SKIN_NAME_INPUT_PROMPT,
        reply_markup=skip_keyboard,
        parse_mode="HTML",
    )

    await state.set_state(SearchForSkinStates.waiting_for_skin_name)


@dp.message(SearchForSkinStates.waiting_for_skin_name)
async def get_skin_name(message: Message, state: FSMContext) -> None:
    skin_name = message.text.strip()

    if skin_name.lower() in {"skip", "‚è≠ skip", "‚è≠Ô∏è", "‚è≠"}:
        await state.update_data(names=[])

    elif skin_name:
        await state.update_data(names=[skin_name])

    else:
        await message.answer(
            "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–∏–Ω–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚è≠ Skip.",
            reply_markup=skip_keyboard,
        )
        return

    await message.answer(
        "üîç –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å <b>–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞</b> –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON, "
        "–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚è≠ <b>Skip</b>, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥.\n\n"
        f"{JSON_SEARCH_PROMPT}",
        reply_markup=skip_keyboard,
        parse_mode="HTML",
    )

    await state.set_state(SearchForSkinStates.waiting_for_optional_search_params)


@dp.message(SearchForSkinStates.waiting_for_optional_search_params)
async def get_optional_params_and_search(message: Message, state: FSMContext) -> None:
    user_input = message.text.strip()

    allowed_keys = {
        "float_from": float,
        "float_to": float,
        "only_unlocked": int,
        "price_from": (int, float),
        "price_to": (int, float),
        "sort_by": str,
    }

    allowed_sort_values = {"oldest", "newest", "lowest_price", "highest_price"}

    if user_input.lower() in {"skip", "‚è≠ skip", "‚è≠"}:
        optional_params = {}

    else:
        try:
            optional_params = json.loads(user_input)

            if not isinstance(optional_params, dict):
                raise ValueError("JSON is not a dictionary.")

            for key, value in optional_params.items():
                if key not in allowed_keys:
                    await message.answer(
                        f"‚ùó –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: <code>{key}</code>",
                        parse_mode="HTML",
                    )
                    return

                expected_type = allowed_keys[key]
                if not isinstance(value, expected_type):
                    await message.answer(
                        f"‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–ª—è <code>{key}</code>. "
                        f"–û–∂–∏–¥–∞–ª—Å—è —Ç–∏–ø <b>{expected_type.__name__ if isinstance(expected_type, type) else '/'.join(t.__name__ for t in expected_type)}</b>.",
                        parse_mode="HTML",
                    )
                    return

                if key == "sort_by" and value not in allowed_sort_values:
                    await message.answer(
                        "‚ùó –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è <code>sort_by</code>.\n"
                        "–í–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: "
                        "<code>oldest</code>, <code>newest</code>, <code>lowest_price</code>, <code>highest_price</code>",
                        parse_mode="HTML",
                    )
                    return

        except Exception as e:
            await message.answer(
                "‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚è≠ Skip.",
                parse_mode="HTML",
            )
            return

    data = await state.get_data()
    names = data.get("names", [])
    lis_token = data.get("lis_token")

    request_body = {
        **optional_params,
    }
    if names:
        request_body["names[]"] = names

    await message.answer(
        f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:\n<pre>{json.dumps(request_body, indent=2, ensure_ascii=False)}</pre>",
        parse_mode="HTML",
    )

    await state.clear()

    response = await send_request_for_skins(data=request_body, lis_token=lis_token)

    skins = response.get("data", [])

    if not skins:
        await message.answer("‚ùå –°–∫–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.")
        return

    await send_first_skins(message=message, skins=skins)


#####################
##### lis_parse #####
#####################


@dp.message(Command("lis_parse"))
async def lis_parse(message: Message, state: FSMContext) -> None:
    tg_id = message.from_user.id

    user_exists = await lis_crud.check_exist_user_or_not(tg_id=tg_id)

    if not user_exists:
        await message.answer(
            "üîí –í—ã –µ—â—ë –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /lis_auth."
        )
        return

    active_parse_model = await lis_crud.get_user_parse_model(tg_id=tg_id)

    if active_parse_model:
        if active_parse_model.is_active:
            await message.answer(
                "üü¢ –ü–∞—Ä—Å —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω. –•–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥?",
                reply_markup=parse_action_kb,
            )
            await state.set_state(ParseStates.active_parse_action)
            return

        else:
            existed_items = await lis_crud.get_items_by_tg_id(tg_id=tg_id)

            if existed_items:
                item_list = "\n".join(f"‚Ä¢ {item.skin_name}" for item in existed_items)
                await message.answer(
                    "‚õîÔ∏è –ü–∞—Ä—Å –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.\n\n"
                    f"üîé –£ –≤–∞—Å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –ø–∞—Ä—Å–∞:\n\n{item_list}\n\n"
                    "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
                    reply_markup=start_parse_kb,
                )
                await state.set_state(ParseStates.confirm_start_parse)
                return

    await message.answer(
        "–•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –ø—Ä–µ–¥–º–µ—Ç–æ–≤?",
        reply_markup=yes_no_kb,
    )
    await state.set_state(ParseStates.ask_to_start_first_parse)


@dp.message(ParseStates.ask_to_start_first_parse)
async def on_first_parse_start(message: Message, state: FSMContext):
    text = message.text.strip()

    if text == "‚úÖ –î–∞":
        await message.answer("üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–∞—Ä—Å–∏—Ç—å:")

        await state.set_state(ParseStates.add_item_name)

    elif text == "‚ùå –ù–µ—Ç":
        await message.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.")

        await state.clear()


@dp.message(ParseStates.add_item_name)
async def on_item_name(message: Message, state: FSMContext):
    skin_name = message.text.strip()

    await state.update_data(skin_name=skin_name)

    await message.answer(
        "<b>üìè –£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π float –ø—Ä–µ–¥–º–µ—Ç–∞:</b>\n\n"
        "üßÆ <i>–ü—Ä–∏–º–µ—Ä—ã:</i>\n"
        "‚Ä¢ <code>&gt;0.15</code> ‚Äî –±–æ–ª—å—à–µ 0.15\n"
        "‚Ä¢ <code>&lt;0.05</code> ‚Äî –º–µ–Ω—å—à–µ 0.05\n\n"
        "‚ùó <i>–ï—Å–ª–∏ float –Ω–µ –≤–∞–∂–µ–Ω ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ</i> <code>-</code>",
        parse_mode="HTML",
    )

    await state.set_state(ParseStates.add_item_float)


@dp.message(ParseStates.add_item_float)
async def on_item_float(message: Message, state: FSMContext):
    float_input = message.text.strip()

    float_condition = None
    if float_input and float_input not in {"-", "–Ω–µ—Ç", "–ù–µ—Ç"}:
        float_condition = float_input

    await state.update_data(float=float_condition)

    await message.answer(
        "<b>üé® –í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ pattern ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:</b>\n\n"
        "üî¢ <i>–ü—Ä–∏–º–µ—Ä:</i> <code>123, 456, 789</code>\n\n"
        "‚ùó <i>–ï—Å–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–µ –≤–∞–∂–µ–Ω ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ</i> <code>-</code>",
        parse_mode="HTML",
    )

    await state.set_state(ParseStates.add_item_patterns)


@dp.message(ParseStates.add_item_patterns)
async def on_item_patterns(message: Message, state: FSMContext):
    patterns_input = message.text.strip()

    patterns = []
    if patterns_input.lower() not in {"-", "–Ω–µ—Ç", "–ù–µ—Ç"}:
        patterns = [p.strip() for p in patterns_input.split(",") if p.strip()]

    data = await state.get_data()

    success, response_msg = await lis_crud.add_item_to_parse(
        tg_id=message.from_user.id,
        skin_name=data["skin_name"],
        float=data["float"],
        patterns=patterns,
    )

    await message.answer(response_msg, reply_markup=yes_no_kb if success else None)

    if success:
        await state.set_state(ParseStates.confirm_add_another)

    else:
        await state.set_state(ParseStates.add_item_name)


@dp.message(ParseStates.confirm_add_another)
async def on_confirm_add_another(message: Message, state: FSMContext):
    text = message.text.strip()
    tg_id = message.from_user.id

    if text == "‚úÖ –î–∞":
        await message.answer("üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞:")

        await state.set_state(ParseStates.add_item_name)

    elif text == "‚ùå –ù–µ—Ç":
        await message.answer("‚ö°Ô∏è –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥...")

        await handle_start_parse(tg_id=message.from_user.id)


@dp.message(ParseStates.active_parse_action)
async def handle_active_parse_action(message: Message, state: FSMContext):
    text = message.text.strip()
    tg_id = message.from_user.id

    if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã":
        await message.answer("üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:")

        await state.set_state(ParseStates.add_item_name)

    elif text == "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä—Å":
        await handle_stop_parse(tg_id=tg_id)

        await message.answer("üõë –ü–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

        await state.clear()

    elif text == "üóë –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã":
        existed_items = await lis_crud.get_items_by_tg_id(tg_id=tg_id)

        item_list = "\n".join(
            f"‚Ä¢ [{item.id}] {item.skin_name}"
            f"{f' | –ü–∞—Ç—Ç–µ—Ä–Ω—ã: {item.patterns}' if item.patterns else ''}"
            f"{f' | –§–ª–æ–∞—Ç: {item.float}' if item.float else ''}"
            for item in existed_items
        )

        await message.answer(
            "üóë –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤. –í–æ—Ç —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫:\n\n"
            f"{item_list}\n\n–í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–µ–¥–º–µ—Ç–∞(–æ–≤), –∫–æ—Ç–æ—Ä—ã–π(—ã–µ) —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:"
        )

        await state.set_state(ParseStates.delete_item_id)

    elif text == "‚ùå –ù–∏—á–µ–≥–æ":
        await message.answer("üëå –û–∫–µ–π, –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ–º.")

        await state.clear()

    else:
        await message.answer("‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.")


@dp.message(ParseStates.delete_item_id)
async def delete_item_by_id(message: Message, state: FSMContext):
    input_text = message.text.strip()
    tg_id = message.from_user.id

    raw_ids = [item.strip() for item in input_text.replace(",", " ").split()]

    try:
        item_ids = list({int(item_id) for item_id in raw_ids if item_id.isdigit()})

    except ValueError:
        await message.answer("‚ùå –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ ID ‚Äî —ç—Ç–æ —á–∏—Å–ª–∞.")
        return

    if not item_ids:
        await message.answer("‚ùå –ù–µ –≤–≤–µ–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ ID.")
        return

    deleted_ids = await lis_crud.delete_items_by_ids(tg_id=tg_id, item_ids=item_ids)

    if deleted_ids:
        await message.answer(
            f"‚úÖ –£–¥–∞–ª–µ–Ω—ã –ø—Ä–µ–¥–º–µ—Ç—ã —Å ID: {', '.join(map(str, deleted_ids))}"
        )

    else:
        await message.answer("‚ùå –ù–∏ –æ–¥–∏–Ω –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω –∏ —É–¥–∞–ª—ë–Ω.")

    remaining_items = await lis_crud.get_items_by_tg_id(tg_id=tg_id)

    if remaining_items:
        await message.answer("üîÅ –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –æ–±–Ω–æ–≤–ª—ë–Ω. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥...")

        await handle_start_parse(tg_id=tg_id)

    else:
        await handle_stop_parse(tg_id=tg_id)

        await message.answer(
            "üõë –£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞. –ü–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
        )

    await state.clear()


@dp.message(ParseStates.confirm_start_parse)
async def on_start_parse_options(message: Message, state: FSMContext):
    text = message.text.strip()
    tg_id = message.from_user.id

    if text == "‚úÖ –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å":
        await message.answer("üîÑ –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥...")

        await handle_start_parse(tg_id=tg_id)

        await state.clear()

    elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã":
        await message.answer("üÜï –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:")

        await state.set_state(ParseStates.add_item_name)

    elif text == "üóë –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã":
        items = await lis_crud.get_items_by_tg_id(tg_id=tg_id)

        item_list = "\n".join(f"‚Ä¢ ID: {item.id} ‚Äî {item.skin_name}" for item in items)

        await message.answer(
            "üóë –í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):\n\n"
            + item_list
        )

        await state.set_state(ParseStates.delete_item_id)

    elif text == "‚ùå –ù–∏—á–µ–≥–æ":
        await message.answer("üëå –û–∫–µ–π, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º.")

        await state.clear()

    else:
        await message.answer(
            "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã."
        )
